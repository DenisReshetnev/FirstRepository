from tkinter import *
from tkinter.filedialog import *    # Импорт всех функций tkinter.filedialog
import random   # Импорт модуля


def get_coding(letter, max_rnd, lst):
    """Кодирует символ по методу блакнот"""
    # rnd_index = random.randint(0, max_rnd)
    rez = -1
    for i in range(len(lst)):   # Создание цикла по длинне словаря
        if lst[i] == letter:
            rez = i
            break
    return rez


def get_lst():
    """Функция получения словаря и заданного текста """
    txt = txt2cod.get('1.0', 'end')
    cod_txt = []
    for i in txt:
        cod_txt.append(str(i))
    k = libEntry.get()
    file = open(libEntry.get(), 'r', encoding="utf8")   # Открытие файла со словарём
    line = file.read()
    lst = []
    for i in line:
        lst.append(str(i))
    cod_txt = cod_txt.lower()    # Раскоментировать для того чтобы не зависить от регистра
    return lst, cod_txt


def coding_click(event):
    """ Нажатие кнопки кодировать
        Вывод закодировоного текста"""
    lst = get_lst()
    max_rnd = round(len(lst[0]) - 0.3 * len(lst[0]))     # Получение округлённого значения кол-ва символов в словаре
    coding = []
    for i in range(len(lst[1])):    # Итеррируемся по символам в словаре
        txt2 = get_coding(lst[1][i], max_rnd, lst[0])   # Вызов функции кодирования функции
        coding.append(txt2)
    coding = coding[0:len(coding) - 1]
    flag = 0
    for i in range(len(coding)):
        if coding[i] == -1:
            flag = 1
    if flag == 1:
        output.delete('1.0', 'end')
        output.insert("0.0", 'Словарь не подходит для кодирования.')
    else:
        output.delete('1.0', 'end')
        output.insert("0.0", coding)


def get_decoding(num):
    """Функция декодирования символа"""
    lst = get_lst()
    rez = lst[0][num]
    return rez


def decoding_click(event):
    """Функция отвечающая за нажатие кнопки декодирование"""
    decod_txt = txt2cod.get('1.0', 'end')
    decod_txt_str = []
    for i in range(len(decod_txt)):
        decod_txt_str.append(str(decod_txt[i]))
    decod_txt_str = decod_txt_str[0:len(decod_txt_str) - 1]
    decod_txt_str.append(str(' '))
    decod_txt_int = []
    count = ''
    for i in range(len(decod_txt_str)):
        if decod_txt_str[i] != ' ':     # Обход символа пробел
            count = count + decod_txt_str[i]
        else:
            count_int = int(count)
            decod_txt_int.append(count_int)
            count = ''
            count_int=0
        print(decod_txt_int)
        lst = get_lst()
        decoding = []
        for i in range(len(decod_txt_int)):
            txt2 = get_decoding(decod_txt_int[i])
            decoding.append(txt2)
        decoding = ''.join(decoding)
        output.delete('1.0', 'end')
        output.insert("0.0", decoding)  # Вывод декодированого текста в окно результат


def clear(event):
    """Функция очистки"""
    output.delete('1.0', 'end')
    txt2cod.delete('1.0', 'end')


def save(event):
    """Функция сохранить"""
    file = open('results.txt', 'w' )    # Перезапись файла
    file.write(output.get('0.0', 'end'))
    file.close()


window = Tk()   # Создание приложения окна
window.title("Шифратор на основе алгоритма «Блокнот»")
window.iconbitmap(u'main.ico')  # Загрузка иконки из нашей папки со всеми файломи
window.resizable(width=False, height=False)
window.configure(bg='white')

frame1 = Frame(window, width=780, height=410)   # Создание общего поля
frame1.grid(row=0, column=0)

label1 = Label(frame1, text='Исходный текст:', width=40, font="Verdana 12")
label1.place(x=10, y=10)

txt2cod = Text(frame1, width=36, height=15, bd=2, font="Verdana 12", wrap=WORD)
txt2cod.config(state=NORMAL)
txt2cod.place(x=10, y=35)   # Формы текста, размер, цвет, шрифт

label2 = Label(frame1, text='Результат:', width=40, font="Verdana 12")
label2.place(x=400, y=10)

output = Text(frame1, bg="white", font="Verdana 12", width=36, height=15, bd=2, wrap=WORD)
output.config(state=NORMAL)
output.place(x=400, y=35)

label3 = Label(frame1, text='Файл со словарем:', width=20, font="Verdana 12")
label3.place(x=10, y=315)

libEntry = Entry(frame1, width=18, bd=2, font="Verdana 12")
libEntry.insert(END, 'dictionary.txt')
libEntry.place(x=10, y=340)

btnCod = Button(frame1, width=14, bg='white', font="Verdana 12")     # Параметры кнопки
btnCod.place(x=430, y=330)  # Размеры кнопки
btnCod['text'] = 'Кодировать'   # Надпись  на кнопке
btnCod.bind('<Button-1>', coding_click) 

btnDec = Button(frame1, width=14, bg='white', font="Verdana 12")
btnDec.place(x=590, y=330)
btnDec['text'] = 'Декодировать'
btnDec.bind('<Button-1>', decoding_click)

btnClear = Button(frame1, width=14, bg='white', font="Verdana 12")
btnClear.place(x=220, y=330)
btnClear['text'] = 'Очистить'
btnClear.bind('<Button-1>', clear)

btnSave = Button(frame1, width=14, bg='white', font="Verdana 12")
btnSave.place(x=220, y=370)
btnSave['text'] = 'Сохранить'
btnSave.bind('<Button-1>', save)

window.mainloop()   # Запустить окно
